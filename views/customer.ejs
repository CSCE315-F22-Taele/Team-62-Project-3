<!DOCTYPE html>
<html>
	<head>
		<title>customer view</title>
		<style>
			#contentWrapper{
				width:100%;
			}
		
		.center-container {
			margin: auto;
			width: 100vmin;
			justify-content: center;
			text-align: center;
			
			border: 5px solid;
			padding: 50px 0;
		}


		button {
			border:none;
			background:#2c3473;
			color:white;
			border:2px solid #2c3473;
			margin:10px;
			padding:10px 5px;
			border-radius:5px;
			cursor:pointer;
		}

		button.selected {
			background:white;
			color:#2c3473;
		}

		button:focus {
			text-decoration:underline;
		}

		button.neutral{
			background:#444 ;
			border:none;
		}
		
		.main-grid-items {
			display: grid;
			grid-template-columns: repeat(2, 100px);
      grid-template-rows: repeat(6, 100px);
      margin:0px 50px;
      height:500px;
      grid-gap:0px;
		}

		.customer-start {
			display: block;
		}

		</style>

	</head>
	<body>
		<div class="center-container">
      <div id="google_translate_id"></div>

			<div style="display: block" id="start-screen">
				<h2>Welcome to Pom and Honey!</h2>

				<div class="customer-start">
					<button onclick="showOrderMenu('start-screen');showOrderMenu('order-screen')">
						Start Order
					</button>
					<button>Login</button>
				</div>
			</div>
			
			<div id="order-screen" style="display: none">
				<h2>What Looks Good Today?</h2>
				<table id="contentWrapper">
					<tr>
							<td>
								<div class="main-grid-items">
									<% for(let productDef of productDefs) { %>
										<button 
											onclick="loadNewProduct(<%=productDef.id%>);showOrderMenu('order-screen');showOrderMenu('rice-screen')"
											id="productDef_button_<%=productDef.id%>"
										>
											<%=productDef.name%>
										</button>
									<% } %>
								</div>
							</td>
					</tr>
				</table>
				<div>
					<button
						onclick="showOrderMenu('order-screen');showOrderMenu('rice-screen')"
					>
						Next ⮞
					</button>
				</div>
			</div>

			<div id="rice-screen" style="display: none">
				<table id="contentWrapper">
					<tr>
						<td>
							<div class="main-grid-items">
								<% for (let item of items) { %> 
									<% if (item.categoryid === 0) { %> 
											<button
												onclick="showOrderMenu('protein-screen');showOrderMenu('rice-screen')"
											>
												<%= item.name %>
											</button>
									<% } %> 
								<% } %> 
							</div>
						</td>
					</tr>
				</table>
				<div>
					<button
						onclick="showOrderMenu('order-screen');showOrderMenu('rice-screen')"
					>
						⮜ previous
					</button>
					<button
						onclick="showOrderMenu('rice-screen');showOrderMenu('protein-screen')"
					>
						Next ⮞
					</button>
				</div>
			</div>

			<div id="protein-screen" style="display: none">
				<table id="contentWrapper">
					<tr>
						<td>
							<div class="main-grid-items">
								<% for (let item of items) { %> 
									<% if (item.categoryid === 1) { %> 
											<button
												onclick="showOrderMenu('toppings-screen');showOrderMenu('protein-screen')"
											>
												<%= item.name %>
											</button>
									<% } %> 
								<% } %> 
							</div>
						</td>
					</tr>
				</table>
				<div>
					<button
						onclick="showOrderMenu('protein-screen');showOrderMenu('rice-screen')"
					>
						⮜ previous
					</button>
					<button
						onclick="showOrderMenu('protein-screen');showOrderMenu('toppings-screen')"
					>
						Next ⮞
					</button>
				</div>
			</div>

			<div id="toppings-screen" style="display: none">
				<table id="contentWrapper">
					<tr>
						<td>
							<div class="main-grid-items">
								<% for (let item of items) { %> 
									<% if (item.categoryid === 2) { %> 
										<button
											onclick="showOrderMenu('extras-screen');showOrderMenu('toppings-screen')"
										>
											<%= item.name %>
										</button>
									<% } %> 
								<% } %> 
							</div>
						</td>
					</tr>
				</table>
				<div>
					<button
						onclick="showOrderMenu('toppings-screen');showOrderMenu('protein-screen')"
					>
						⮜ previous
					</button>
					<button
						onclick="showOrderMenu('toppings-screen');showOrderMenu('extras-screen')"
					>
						Next ⮞
					</button>
				</div>
			</div>

			<div id="extras-screen" style="display: none">
				<table id="contentWrapper">
					<tr>
						<td>
							<div class="main-grid-items">
								<% for (let item of items) { %> 
									<% if (item.categoryid === 3) { %> 
										<button
											onclick="showOrderMenu('extras-screen')"
										>
											<%= item.name %>
										</button>
									<% } %> 
								<% } %> 
							</div>
						</td>
					</tr>
				</table>
				<div>
					<button
						onclick="showOrderMenu('toppings-screen');showOrderMenu('extras-screen')"
					>
						⮜ previous
					</button>
					<button
						onclick=""
					>
						Next ⮞
					</button>
				</div>
			</div>
			
		</div>

    <script src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
		<script>

			var productDefs = <%-JSON.stringify(productDefs)%>;
			var items = <%-JSON.stringify(items)%>;

			let buttons = document.querySelectorAll("[selectable=true]");
			for(let button of buttons) {
				button.addEventListener("click", function() {
					button.classList.toggle("selected");
					itemId = button.getAttribute("itemId");
        		// If button represents an item, update product data to reflect this.
					if(itemId) {
						itemId = parseInt(itemId);
						let product = products[selectedProductId];
						if(product) {
							if(button.classList.contains("selected")) {
								product.selectedItems.add(itemId);
							}
							else {
								product.selectedItems.remove(itemId);
							}
						}
					}
				});
			}

			/**
			 * returns a list of items ()
			 * this can be a set of: butter chicken, falafels, Gyro Meat etc...
			 * or: olives, tomatoes, peppers, etc..
			 * or something else
			 * uses the 'item' table in the DB
			 */
			const loadCategory = (category) => {
        let categoryItems = [];
				if (category === 1) {
					for(let item of items){
						if(item.categoryid === 1) {
							console.log("protein items: " + item.name)
							categoryItems = []
							categoryItems.concat(item.name)
						}
					}
				} else if (category === 2) {
					for(let item of items){
						if(item.categoryid === 2) {
							console.log("protein items: " + item.name)
							categoryItems = []
							categoryItems.concat(item.name)
						}
					}
				} else if (category === 3) {
					for(let item of items){
						if(item.categoryid === 3) {
							console.log("protein items: " + item.name)
							categoryItems = []
							categoryItems.concat(item.name)
						}
					}
				}
        return categoryItems;
			}


      function loadNewProduct(productDefId){
				let nextMenu = []
        productDef = getProductDef(productDefId);

				if (productDef.name == "Bowl") {
					nextMenu = loadCategory(1)
				} else if (productDef.name == "Gyro") {
					nextMenu = loadCategory(1);
				} else if (productDef.name == "Hummus and Pita") {
					console.log("Selected Hummus and Pita")
				} else if (productDef.name == "Two Falafels") {
					console.log("Selected Two Falafels")
				} else if (productDef == "Extra Protein") {
					console.log("Selected Extra Protein")
				} else if (productDef == "Extra Dressing") {
					console.log("Selected Extra Dressing") 
				} else if (productDef == "Fountain Drink") {
					console.log("Selected Fountain Drink")
				}
      }

      function loadItemsForProductDef(productDefId, selectedItems) {
        productDef = getProductDef(productDefId);
        let buttons = document.querySelectorAll("#all-items button");
        for (let button of buttons) {
          itemId = button.getAttribute("itemId");
          if (itemId) {
            itemId = parseInt(itemId);
						console.log("itemId: " + itemId)
            if (productDef.optionalitemlist.includes(itemId)) {
              button.style.display = "block";
              if (selectedItems.has(itemId)) {
                button.classList.add("selected");
              } else {
                button.classList.remove("selected");
              }
            } else{
              button.style.display = "none";
            }
          }
        }
        document.querySelector("#remove_product_button").style.display = "block";
      }


      function updatePrice() {
        let price = 0;
        for(let i in products) {
          price += products[i].price;
        }
        document.querySelector("#subtotal").innerText = price.toFixed(2);
        document.querySelector("#curDiscount").innerText = discount;
        document.querySelector("#total").innerText = (price * 1.0825 * (100-discount)/100).toFixed(2);
      }

			var products = {}; // Used to store product data.
			var currentProductId = 0; // Used to track new products.
			var selectedProductId = -1; // Used to track the selected product.

			function googleTranslateElementInit() {
				new google.translate.TranslateElement(
					{pageLanguage: 'en'}, 'google_translate_id'
				)
			}

			function showOrderMenu(id) {
				var x = document.getElementById(id);
				if (x.style.display === "none") {
					return x.style.display = "block";
				}
				return x.style.display = "none";
			}

      const getProductDef = (id) => {
        let productDef;
					for(let def of productDefs){
						if(def.id == id){
							productDef = def;
							break;
						}
					}
        return productDef;
      }
		
		</script>

	</body> 
</html>