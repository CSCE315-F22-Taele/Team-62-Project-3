<!DOCTYPE html>
<html>
	<head>
        <link rel="stylesheet" type="text/css" href="/css/main.css"></link>
		<title>Server | Manager</title>

		<style>
			.center-container {
				margin: auto;
				width: 80%;

			}
			.btn-vertical button {
				display: block;  /* vertical buttons */
                width:200px;
			}
			.main-grid-items {
				display: grid;
				grid-template-columns: repeat(5, 100px);
                grid-template-rows: repeat(5, 100px);
                margin:0px 50px;
                height:500px;
                grid-gap:0px;
			}
            #contentWrapper{
                width:100%;
            }
		</style>

	</head>
	<body>
		<%- include("logo.ejs") %>
		<h2>Server View</h2>
        <div id="google_translate_id"></div>
        <table id="contentWrapper">
            <tr>
                <td align="right">
                    <div class="btn-vertical">
                        <% for(let productDef of productDefs) { %>
                        <button onclick="loadNewProduct(<%=productDef.id%>)" id="productDef_button_<%=productDef.id%>"><%=productDef.name%></button>
                        <% } %>
                    </div>
                </td>
                
                <td align="center" style="width:500px;">
                    <div class="main-grid-items" id="all-items">
                        <% for(let item of items){ %>
                            <button selectable=true itemId=<%=item.id%> style="display:none;" id="item_button_<%=item.id%>"><%=item.name%></button>
                        <% } %>
                        <button id="remove_product_button" class="neutral" style="display:none" onclick="removeSelectedProduct()">Remove Product</button>
                    </div>
                </td>

                <td align="left" style="vertical-align:bottom;">
                    <div class="btn-vertical">
                    <p>
                        Add discount: <input type="number" id="discount"/>
                    </p>
                    <button onclick="addDiscount()">Discount</button>
                </div>
            </td>
                
                <td align="left" style="vertical-align:bottom;">
                    <div class="btn-vertical">
                        <div id="receipt"></div>
                        <p>Subtotal: $<span id="subtotal">0.00</span><br>
                            Discount: <span id="curDiscount">0</span>%<br>
                            Total: $<span id="total">0.00</span><br>
                        </p>
                    <button onclick="finalizeOrder()">Finalize Order</button>
                    </div>
                </td>
            
            </tr>
        </table>


        <script src="/js/server.js"></script>
        <script src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
		<script>
            var discount = 0;

            var productDefs = <%-JSON.stringify(productDefs)%>;

            let buttons = document.querySelectorAll("[selectable=true]");
            for(let button of buttons) {
                button.addEventListener("click", function() {
                    button.classList.toggle("selected");
                    itemId = button.getAttribute("itemId");
                    // If button represents an item, update product data to reflect this.
                    if(itemId) {
                        itemId = parseInt(itemId);
                        let product = products[selectedProductId];
                        if(product) {
                            if(button.classList.contains("selected")) {
                                product.selectedItems.add(itemId);
                            }
                            else {
                                product.selectedItems.remove(itemId);
                            }
                        }
                    }
                });
            }

            var products = {}; // Used to store product data.
            var currentProductId = 0; // Used to track new products.
            var selectedProductId = -1; // Used to track the selected product.

            function updatePrice(){
                let price = 0;
                for(let i in products){
                    price += products[i].price;
                }
                document.querySelector("#subtotal").innerText = price.toFixed(2);
                document.querySelector("#curDiscount").innerText = discount;
                document.querySelector("#total").innerText = (price * 1.0825 * (100-discount)/100).toFixed(2);
            }

			const totalPrice = () => {
				let price = 0;
				for(let i in products){
					price += products[i].price;
				}
                return (price * 1.0825).toFixed(2);
            }

            function getProductDef(id){
                let productDef;
                for(let def of productDefs){
                    if(def.id == id){
                        productDef = def;
                        break;
                    }
                }
                return productDef;
            }

            function resetAllButtons(){
                let buttons = document.querySelectorAll("#all-items button");
                for(let button of buttons){
                    button.style.display = "none";
                    button.classList.remove("selected");
                }
                selectedProductId = -1;
            }

            function loadItemsForProductDef(productDefId, selectedItems) {
                productDef = getProductDef(productDefId);
                let buttons = document.querySelectorAll("#all-items button");
                for(let button of buttons){
                    itemId = button.getAttribute("itemId");
                    if(itemId){
                        itemId = parseInt(itemId);
						console.log("itemId: " + itemId)
                        if(productDef.optionalitemlist.includes(itemId)){
                            button.style.display = "block";
                            if(selectedItems.has(itemId)){
                                button.classList.add("selected");
                            }
                            else{
                                button.classList.remove("selected");
                            }
                        }
                        else{
                            button.style.display = "none";
                        }
                    }
                }
                document.querySelector("#remove_product_button").style.display = "block";
            }

            function loadNewProduct(productDefId){
                productDef = getProductDef(productDefId);
                // Add a new button with a reference to the product.
                let receiptButton = document.createElement("button");
                receiptButton.innerText = productDef.name + ": $" + productDef.price;
                let thisProductId = currentProductId; // Copy the variable in a local context.
                receiptButton.id = "product_button_" + thisProductId;
                receiptButton.addEventListener("click", function(){
                    loadExistingProduct(thisProductId);
                });
                document.querySelector("#receipt").appendChild(receiptButton);
                newProduct = {
                    productDef: productDefId,
                    price: productDef.price,
                    selectedItems: new Set()
                };
                products[thisProductId] = newProduct;
                loadExistingProduct(thisProductId, newProduct.selectedItems);
                updatePrice();
                currentProductId += 1;
            }

            function loadExistingProduct(id){
                selectedProductId = id;
                product = products[id];
                loadItemsForProductDef(product.productDef, product.selectedItems);
            }

            function removeSelectedProduct(){
                console.log("Removing product " + selectedProductId);
                button = document.querySelector("#product_button_" + selectedProductId);
                console.log(button);
                button.parentNode.removeChild(button); // delete the button
                delete products[selectedProductId];
                resetAllButtons();
                updatePrice();
            }
            function addDiscount() {
                console.log("Discount:" +discount);
                discount= document.getElementById("discount").value;
                if(discount > 100){
                    discount = 100;        
                }
                else if(discount < 0){
                    discount = 0;
                }
                console.log("Discount:" +discount);
                let price = 0;
                    for(let i in products){
                        price += products[i].price;
                    }
                    document.querySelector("#subtotal").innerText = price.toFixed(2);
                    document.querySelector("#curDiscount").innerText = discount;
                    document.querySelector("#total").innerText = (price * 1.0825 * (100-discount)/100).toFixed(2);
            }

            function finalizeOrder() {
                // Hints:
                // start with the products object
                const date = new Date();
				let day = date.getDate();
                let month = date.getMonth() + 1;
                let year = date.getFullYear();
                let dbDate = year+"-"+month+"-"+day
                let orderDate = month+"/"+day+"/"+year

                let productList = []


                // putting values into a list
                let values = Object.values(products)
                for (value in values) {
					let newProduct = {"id": values[value].productDef, "selectedItems": Array.from(values[value].selectedItems)}
                    productList.push(newProduct)
                }

				// the object that will pass into addOrderToDatabase
                finalOrder = {
                    "discount": discount,
					"productList": productList,
				}

				console.log(finalOrder)

                // work with backend (Ezra) to figure out what he wants the object to look like.

                // use server.POST (import /js/server.js)
                server.POST("/order", finalOrder, (response) => {
                    window.location.reload();
                }, (error) => {
					alert(error);
                })

            }

            function googleTranslateElementInit() {
                new google.translate.TranslateElement(
                    {pageLanguage: 'en'}, 'google_translate_id'
                )
            }
		</script>
	</body>
</html>
